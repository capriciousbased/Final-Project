{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useForkRef;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _setRef = _interopRequireDefault(require(\"./setRef\"));\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      (0, _setRef.default)(refA, refValue);\n      (0, _setRef.default)(refB, refValue);\n    };\n  }, [refA, refB]);\n}","map":{"version":3,"sources":["/Users/mdanisulhoquekhan/Desktop/Final Project/node_modules/@material-ui/core/utils/useForkRef.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","useForkRef","React","_setRef","refA","refB","useMemo","refValue"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,KAAK,GAAGP,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,SAASO,UAAT,CAAoBG,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B;AACF;AACA;AACA;AACA;AACE,SAAOH,KAAK,CAACI,OAAN,CAAc,YAAY;AAC/B,QAAIF,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,WAAO,UAAUE,QAAV,EAAoB;AACzB,OAAC,GAAGJ,OAAO,CAACH,OAAZ,EAAqBI,IAArB,EAA2BG,QAA3B;AACA,OAAC,GAAGJ,OAAO,CAACH,OAAZ,EAAqBK,IAArB,EAA2BE,QAA3B;AACD,KAHD;AAID,GATM,EASJ,CAACH,IAAD,EAAOC,IAAP,CATI,CAAP;AAUD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useForkRef;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _setRef = _interopRequireDefault(require(\"./setRef\"));\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      (0, _setRef.default)(refA, refValue);\n      (0, _setRef.default)(refB, refValue);\n    };\n  }, [refA, refB]);\n}"]},"metadata":{},"sourceType":"script"}