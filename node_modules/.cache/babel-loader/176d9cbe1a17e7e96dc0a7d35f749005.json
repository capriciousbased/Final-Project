{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnitless = isUnitless;\nexports.getUnit = getUnit;\nexports.toUnitless = toUnitless;\nexports.convertLength = convertLength;\nexports.alignProperty = alignProperty;\nexports.fontGrid = fontGrid;\nexports.responsiveProperty = responsiveProperty;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n  var output = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(min).concat(unit));\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"sources":["/Users/mdanisulhoquekhan/Desktop/Final Project/node_modules/@material-ui/core/styles/cssUtils.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","isUnitless","getUnit","toUnitless","convertLength","alignProperty","fontGrid","responsiveProperty","_defineProperty2","String","parseFloat","length","input","match","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","_ref","size","grid","sizeBelow","sizeAbove","_ref2","lineHeight","pixels","htmlFontSize","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","transform","output","default","concat","factor","forEach","breakpoint","Math","round"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnitless = isUnitless;\nexports.getUnit = getUnit;\nexports.toUnitless = toUnitless;\nexports.convertLength = convertLength;\nexports.alignProperty = alignProperty;\nexports.fontGrid = fontGrid;\nexports.responsiveProperty = responsiveProperty;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n  var output = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(min).concat(unit));\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}"]},"metadata":{},"sourceType":"script"}